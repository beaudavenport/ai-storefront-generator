{"version":3,"sources":["webpack:///./src/pages/index.js"],"names":["IndexPage","data","entries","allMarkdownRemark","edges","map","edge","node","title","description","className","href","fluid","heroImage","childImageSharp","alt","key","frontmatter","name","author","github","aria-label","tagline","rawMarkdownBody","to","fields","slug"],"mappings":"2FAAA,yFA8PeA,UAvPG,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACbC,EAAUD,EAAKE,kBAAkBC,MAAMC,KAAI,SAACC,GAAD,OAAUA,EAAKC,QAChE,OACE,6BACE,kBAAC,IAAD,CAAKC,MAAM,0BAA0BC,YAAY,6FACjD,yBAAKC,UAAU,iBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,kEACb,6BACE,wBAAIA,UAAU,cAAd,2BAGA,uHAIA,2CAEE,uBAAGC,KAAK,kDACL,IACD,uEAIN,4BAAQD,UAAU,oBAChB,kBAAC,IAAD,CACEE,MAAOX,EAAKY,UAAUC,gBAAgBF,MACtCG,IAAI,8CAOhB,yBAAKL,UAAU,aACb,6BAASA,UAAU,WACjB,uBAAGA,UAAU,cAAb,6EAGA,uBAAGA,UAAU,cACX,mEAIF,uBAAGA,UAAU,SACX,2DACC,IAFH,yCAIG,IACD,uBAAGC,KAAK,6DAAR,qCAGC,IARH,4GAWG,IACD,6GAIF,uBAAGD,UAAU,SAAb,gCAEG,IACD,wCACC,IAJH,4PAUG,IACD,wCACC,IAZH,8EAgBA,uBAAGA,UAAU,SAAb,yCAEG,IACD,oDACC,IAJH,wGAQA,wBAAIA,UAAU,cAAd,0BACA,uBAAGA,UAAU,SACX,gCACE,uBAAGC,KAAK,qEAAR,wBAED,IAJH,6IAOG,IACD,8FACC,IATH,QAWG,IACD,4DAZF,2BAcG,IACD,gCACE,uBAAGA,KAAK,6CAAR,4BAED,IAlBH,MAoBG,IACD,gCACE,uBAAGA,KAAK,2BAAR,YAED,IAxBH,QA0BG,IACD,kDACC,IA5BH,+GAgCA,uBAAGD,UAAU,SAAb,4FAGG,IACD,sHAIF,6BACA,wBAAIA,UAAU,cAAd,WACA,uBAAGA,UAAU,cAAb,qGAICR,EAAQG,KAAI,SAACE,GAAD,OACX,yBAAKG,UAAU,MAAMM,IAAKT,EAAKU,YAAYC,MACzC,yBAAKR,UAAU,WACb,wBAAIA,UAAU,cAAcH,EAAKU,YAAYC,MAC7C,2BACE,4CACA,6BACA,gCACGX,EAAKU,YAAYE,QAEpB,6BACA,uBAAGR,KAAI,sBAAwBJ,EAAKU,YAAYG,OAAUC,aAAW,SACnE,0BAAMX,UAAU,iBACd,uBAAGA,UAAU,mBAEd,IACAH,EAAKU,YAAYG,SAGtB,+BAEGb,EAAKU,YAAYK,QAFpB,KAKA,6BACA,yBAAKZ,UAAU,WACb,uBAAGA,UAAU,uBAAuBH,EAAKgB,kBAE3C,kBAAC,IAAD,CAAMC,GAAIjB,EAAKkB,OAAOC,KAAMhB,UAAU,kBAAtC,wBAMN,yBAAKA,UAAU,OACb,yBAAKA,UAAU,WACb,wBAAIA,UAAU,cAAa,8CAC3B,6BACA,yBAAKA,UAAU,WACb,uIAIA,oDAEG,IACD,uBAAGC,KAAK,4DAAR,uBACC,IAJH,eAOA,4DACA,iHAGA,8DACA,+HAIA,6BACE,iCAEE,6BAFF,6BAIE,6BAJF,oBAME,6BANF,+BAQE,6BARF,0CAUE,6BAVF,MAYE,6BAZF,kHAeE,6BACA,6BAhBF,yFAmBE,uBAAGA,KAAK,6CAAR,qCACA,6BApBF,yFAuBE,6BAvBF,mEA2BF,mDAEG,IACD,oDACC,IAJH,8DAQF,2BACE,gCACE,uBAAGA,KAAK,2DAA2DD,UAAU,qBAA7E,iCASZ,kBAAC,IAAD","file":"component---src-pages-index-js-75c970663fbb07221090.js","sourcesContent":["import React from 'react';\nimport { graphql, Link } from 'gatsby';\nimport { PropTypes } from 'prop-types';\nimport Img from 'gatsby-image';\nimport Footer from '../components/footer';\nimport SEO from '../components/seo';\n\nconst IndexPage = ({ data }) => {\n  const entries = data.allMarkdownRemark.edges.map((edge) => edge.node);\n  return (\n    <div>\n      <SEO title=\"AI Storefront Generator\" description=\"A silly assortment of e-commerce storefronts created with the power of machine learning!\" />\n      <div className=\"hero is-light\">\n        <div className=\"hero-body\">\n          <div className=\"container\">\n            <div className=\"is-flex is-flex-direction-row is-justify-content-space-between\">\n              <div>\n                <h1 className=\"title is-2\">\n                  AI Storefront Generator\n                </h1>\n                <p>\n                  A silly assortment of e-commerce storefronts\n                  created with the power of machine learning!\n                </p>\n                <p>\n                  Built for the\n                  <a href=\"https://www.gatsbyjs.com/silly-site-challenge/\">\n                    {' '}\n                    <strong>Gatsby Silly Site Challenge 2020</strong>\n                  </a>\n                </p>\n              </div>\n              <figure className=\"image is-128x128\">\n                <Img\n                  fluid={data.heroImage.childImageSharp.fluid}\n                  alt=\"A silly AI-generated image of a Shop\"\n                />\n              </figure>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"container\">\n        <section className=\"section\">\n          <p className=\"title is-5\">\n            Artificial Intelligence tools, in their current form, are quite powerful.\n          </p>\n          <p className=\"title is-5\">\n            <em>\n              But they can also be pretty silly.\n            </em>\n          </p>\n          <p className=\"block\">\n            <strong>AI Storefront Generator</strong>\n            {' '}\n            explores the silly side of AI by using\n            {' '}\n            <a href=\"https://en.wikipedia.org/wiki/Natural_language_processing\">\n              Natural Language Processing (NLP)\n            </a>\n            {' '}\n            to analyze a text prompt, then using AI image and text\n            generation to create a fake e-commerce storefront.\n            {' '}\n            <strong>\n              Sadly, none of the products are actually for sale (at least, not yet...)\n            </strong>\n          </p>\n          <p className=\"block\">\n            Each storefront consists of a\n            {' '}\n            <em>Products</em>\n            {' '}\n            page (with a list of all the entities\n            considered a CONSUMER_GOOD\n            based on Google&apos;s Natural Language analysis), individual\n            product details pages (which include reviews based on the sentiment analysis of\n            the CONSUMER_GOOD in the original text), and an\n            {' '}\n            <em>About Us</em>\n            {' '}\n            page\n            with a featured image and AI-generated description of the storefront.\n          </p>\n          <p className=\"block\">\n            As you explore the storefronts, select\n            {' '}\n            <strong>Show Annotations</strong>\n            {' '}\n            from the storefront navigation menu\n            to see a breakdown of components that have AI-generated content!\n          </p>\n          <h3 className=\"title is-5\">The Benefits of Gatsby</h3>\n          <p className=\"block\">\n            <strong>\n              <a href=\"https://www.gatsbyjs.com/docs/reference/config-files/gatsby-node/\">The Gatsby Node API</a>\n            </strong>\n            {' '}\n            provides a lot of neat capabilities. In addition to general manipulation of data\n            (i.e., turning markdown prompts into pages), you can also\n            {' '}\n            <strong>authenticate and consume third-party API&apos;s asynchronously,</strong>\n            {' '}\n            which\n            {' '}\n            <strong>AI Storefront Generator </strong>\n            leverages to consume the\n            {' '}\n            <strong>\n              <a href=\"https://cloud.google.com/natural-language\">Google Natural Language</a>\n            </strong>\n            {' '}\n            and\n            {' '}\n            <strong>\n              <a href=\"https://deepai.org/apis\">Deep AI</a>\n            </strong>\n            {' '}\n            API&apos;s\n            {' '}\n            <strong>at build time,</strong>\n            {' '}\n            while providing a purely static (and therefore\n            fast and secure) experience for actual visitors to the site.\n          </p>\n          <p className=\"block\">\n            An interesting outcome of this functionality is that anytime\n            a new entry prompt is added,\n            {' '}\n            <strong>\n              all the storefronts will be rebuilt, with new AI-generated content. How exciting!\n            </strong>\n          </p>\n          <hr />\n          <h3 className=\"title is-4\">Entries</h3>\n          <p className=\"title is-6\">\n            All of the below entries have been converted into storefronts.\n            Click on &quot;View Storefront&quot; to see!\n          </p>\n          {entries.map((node) => (\n            <div className=\"box\" key={node.frontmatter.name}>\n              <div className=\"content\">\n                <h4 className=\"title is-4\">{node.frontmatter.name}</h4>\n                <p>\n                  <small>Added by:</small>\n                  <br />\n                  <strong>\n                    {node.frontmatter.author}\n                  </strong>\n                  <br />\n                  <a href={`https://github.com/${node.frontmatter.github}`} aria-label=\"reply\">\n                    <span className=\"icon is-small\">\n                      <i className=\"fab fa-github\" />\n                    </span>\n                    {' '}\n                    {node.frontmatter.github}\n                  </a>\n                </p>\n                <p>\n                  &ldquo;\n                  {node.frontmatter.tagline}\n                  &ldquo;\n                </p>\n                <hr />\n                <div className=\"content\">\n                  <p className=\"is-family-monospace\">{node.rawMarkdownBody}</p>\n                </div>\n                <Link to={node.fields.slug} className=\"button is-link\">\n                  View Storefront\n                </Link>\n              </div>\n            </div>\n          ))}\n          <div className=\"box\">\n            <div className=\"content\">\n              <h4 className=\"title is-4\"><em>Add your own!</em></h4>\n              <hr />\n              <div className=\"content\">\n                <p>\n                  You can create your own AI-generated storefront with a file-addition pull request.\n                  No cloning necessary!\n                </p>\n                <p>\n                  Follow the link to the\n                  {' '}\n                  <a href=\"https://github.com/beaudavenport/ai-storefront-generator\">Github project page</a>\n                  {' '}\n                  and select:\n                </p>\n                <pre>Add file -&gt; Create new file</pre>\n                <p>\n                  On the following screen, specify a new markdown file name for your prompt like so:\n                </p>\n                <pre>src/prompts/my-cool-prompt.md</pre>\n                <p>\n                  And complete the contents of your new prompt file with name, author, github,\n                  and prompt like so:\n                </p>\n                <pre>\n                  <p>\n                    ---\n                    <br />\n                    name: Your Storefront Name\n                    <br />\n                    author: Your name\n                    <br />\n                    github: Your github username\n                    <br />\n                    tagline: A quick note about your prompt\n                    <br />\n                    ---\n                    <br />\n                    Your text prompt. Max length is 2000 characters.\n                    This will be used to generate the content for your storefront!\n                    <br />\n                    <br />\n                    Note: you can get a sense of the sort of content\n                    that might be created by visiting the\n                    <a href=\"https://cloud.google.com/natural-language\"> Google Natural Language API Demo</a>\n                    <br />\n                    (in particular, ensure there are a  variety of\n                    CONSUMER_GOOD entities in the analysis,\n                    <br />\n                    as these will be converted into products for your storefront!)\n                  </p>\n                </pre>\n                <p>\n                  Finally, fill out the\n                  {' '}\n                  <strong>propose new file</strong>\n                  {' '}\n                  commit section and submit. I&apos;ll approve as soon as I can!\n                </p>\n              </div>\n              <p>\n                <strong>\n                  <a href=\"https://github.com/beaudavenport/ai-storefront-generator\" className=\"button is-primary\">\n                    Visit project on Github\n                  </a>\n                </strong>\n              </p>\n            </div>\n          </div>\n        </section>\n      </div>\n      <Footer />\n    </div>\n  );\n};\n\nIndexPage.propTypes = {\n  data: PropTypes.object.isRequired, // eslint-disable-line react/forbid-prop-types\n};\n\nexport default IndexPage;\n\nexport const query = graphql`\n  query {\n    heroImage: file(relativePath: { eq: \"shop.jpg\" }) {\n      childImageSharp {\n        fluid(maxWidth: 300) {\n          ...GatsbyImageSharpFluid\n        }\n      }\n    }\n    allMarkdownRemark {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            name\n            author\n            github\n            tagline\n          }\n          rawMarkdownBody\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n `;\n"],"sourceRoot":""}