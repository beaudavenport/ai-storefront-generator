{"version":3,"sources":["webpack:///./src/templates/product.js"],"names":["ProductTemplate","data","pageContext","parentPage","sitePage","title","context","name","navHomePath","pagePath","render","isAnnotationsToggled","productName","description","className","fluid","image","childImageSharp","alt","imageAlt","placement","isActive","productDescription","split","slice","map","paragraph","key","reviews","review","paragraphs","Array","stars","fill","_","i","aria-hidden","reviewer"],"mappings":"2FACA,iIAOe,SAASA,EAAT,GAAiD,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,YACtCC,EAAyBF,EAAzBE,WAAYC,EAAaH,EAAbG,SACpB,OACE,kBAAC,IAAD,CACEC,MAAOF,EAAWG,QAAQC,KAC1BC,YAAaL,EAAWG,QAAQG,SAChCC,OAAQ,gBAAGC,EAAH,EAAGA,qBAAH,OACN,oCACE,kBAAC,IAAD,CAAKN,MAAOH,EAAYU,YAAaC,YAAY,mCACjD,yBAAKC,UAAU,WACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,+BACb,4BAAQA,UAAU,SAChB,kBAAC,IAAD,CACEC,MAAOX,EAASY,MAAMC,gBAAgBF,MACtCG,IAAKd,EAASE,QAAQa,WAExB,yBAAKL,UAAU,qCACb,kBAAC,IAAD,CAAYM,UAAU,SAASC,SAAUV,GACvC,8GAOR,yBAAKG,UAAU,kEACb,6BACE,uBAAGA,UAAU,SAASZ,EAAYU,aAClC,uBAAGE,UAAU,YAAb,UACCV,EAASE,QAAQgB,mBAAmBC,MAAM,MAAMC,MAAM,EAAG,GAAGC,KAAI,SAACC,GAAD,OAC/D,uBAAGZ,UAAU,QAAQa,IAAKD,GAAYA,MAExC,yBAAKZ,UAAU,qCACb,kBAAC,IAAD,CAAYM,UAAU,SAASC,SAAUV,GACvC,gGACmET,EAAYU,YAD/E,cASZ,6BACA,yBAAKE,UAAU,WACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,iBAAd,cAEG,IACD,gCACGZ,EAAYU,cAIhBV,EAAY0B,QAAQH,KAAI,SAACI,GACxB,IAAMC,EAAaD,EAAOA,OAAON,MAAM,wBAAwB,GAAGA,MAAM,MACxE,OACE,yBAAKT,UAAU,UAAUa,IAAKG,EAAW,IACvC,yBAAKhB,UAAU,qCACb,kBAAC,IAAD,CAAYM,UAAU,MAAMC,SAAUV,GACpC,2KAMJ,2BACG,IAAIoB,MAAM7B,EAAY8B,OAAOC,OAAOR,KAAI,SAACS,EAAGC,GAAJ,OAEvC,0BAAMrB,UAAU,gBAAgBa,IAAG,GAAKQ,GACtC,uBAAGrB,UAAU,oBAGjB,4BAAQA,UAAU,QAAQgB,EAAW,KAEvC,yBAAKhB,UAAU,SACb,yBAAKA,UAAU,QACb,kBAAC,IAAD,CAAYM,UAAU,MAAMC,SAAUV,GACpC,mDAKJ,2BACE,uBAAGG,UAAU,aAAasB,cAAY,SACtC,+BACG,IACD,gCAASP,EAAOQ,aAItB,yBAAKvB,UAAU,SACb,2BAAIgB,EAAW,IACf,yBAAKhB,UAAU,qCACb,kBAAC,IAAD,CAAYM,UAAU,SAASC,SAAUV,GACvC,yKAC4IT,EAAYU,YADxJ,QAMN,uBAAGE,UAAU,SAASgB,EAAW,IACjC,uBAAGhB,UAAU,SAASgB,EAAW","file":"component---src-templates-product-js-fc3bd0f8973aed8f0b9b.js","sourcesContent":["import { graphql } from 'gatsby';\nimport Img from 'gatsby-image';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Annotation from '../components/annotation';\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\n\nexport default function ProductTemplate({ data, pageContext }) {\n  const { parentPage, sitePage } = data;\n  return (\n    <Layout\n      title={parentPage.context.name}\n      navHomePath={parentPage.context.pagePath}\n      render={({ isAnnotationsToggled }) => (\n        <>\n          <SEO title={pageContext.productName} description=\"Unique products, made-to-order\" />\n          <div className=\"section\">\n            <div className=\"columns\">\n              <div className=\"column is-one-third-desktop\">\n                <figure className=\"image\">\n                  <Img\n                    fluid={sitePage.image.childImageSharp.fluid}\n                    alt={sitePage.context.imageAlt}\n                  />\n                  <div className=\"is-flex is-justify-content-center\">\n                    <Annotation placement=\"bottom\" isActive={isAnnotationsToggled}>\n                      <strong>\n                        Product images are generated with Deep AI, providing the product name.\n                      </strong>\n                    </Annotation>\n                  </div>\n                </figure>\n              </div>\n              <div className=\"column is-flex is-align-items-center is-justify-content-center\">\n                <div>\n                  <p className=\"title\">{pageContext.productName}</p>\n                  <p className=\"subtitle\">$99.99</p>\n                  {sitePage.context.productDescription.split('\\n').slice(0, 2).map((paragraph) => (\n                    <p className=\"block\" key={paragraph}>{paragraph}</p>\n                  ))}\n                  <div className=\"is-flex is-justify-content-center\">\n                    <Annotation placement=\"bottom\" isActive={isAnnotationsToggled}>\n                      <strong>\n                        {`Descriptions are generated with Deep AI, with given prompt: \"${pageContext.productName} is\"`}\n                      </strong>\n                    </Annotation>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <hr />\n          <div className=\"section\">\n            <div className=\"container\">\n              <h4 className=\"subtitle is-4\">\n                Reviews for\n                {' '}\n                <strong>\n                  {pageContext.productName}\n                </strong>\n              </h4>\n\n              {pageContext.reviews.map((review) => {\n                const paragraphs = review.review.split('A positive review of')[1].split('\\n');\n                return (\n                  <div className=\"section\" key={paragraphs[0]}>\n                    <div className=\"is-flex is-justify-content-center\">\n                      <Annotation placement=\"top\" isActive={isAnnotationsToggled}>\n                        <strong>\n                          Rating based on Google&apos;s Sentiment Analysis score within text prompt\n                          (1 star for negative, 3 stars for neutral, 5 stars for positive)\n                        </strong>\n                      </Annotation>\n                    </div>\n                    <p>\n                      {new Array(pageContext.stars).fill().map((_, i) => (\n                        // eslint-disable-next-line react/no-array-index-key\n                        <span className=\"icon is-small\" key={`${i}`}>\n                          <i className=\"fas fa-star\" />\n                        </span>\n                      ))}\n                      <strong className=\"ml-3\">{paragraphs[0]}</strong>\n                    </p>\n                    <div className=\"block\">\n                      <div className=\"ml-6\">\n                        <Annotation placement=\"top\" isActive={isAnnotationsToggled}>\n                          <strong>\n                            A random name\n                          </strong>\n                        </Annotation>\n                      </div>\n                      <p>\n                        <i className=\"fa fa-user\" aria-hidden=\"true\" />\n                        <small>\n                          {' '}\n                          <strong>{review.reviewer}</strong>\n                        </small>\n                      </p>\n                    </div>\n                    <div className=\"block\">\n                      <p>{paragraphs[2]}</p>\n                      <div className=\"is-flex is-justify-content-center\">\n                        <Annotation placement=\"bottom\" isActive={isAnnotationsToggled}>\n                          <strong>\n                            {`Review title and content are generated with Deep AI, with given prompt (using \"sentiment\"): \"A (positive/negative/neutral) review for ${pageContext.productName}\"`}\n                          </strong>\n                        </Annotation>\n                      </div>\n                    </div>\n                    <p className=\"block\">{paragraphs[4]}</p>\n                    <p className=\"block\">{paragraphs[6]}</p>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </>\n      )}\n    />\n  );\n}\n\nProductTemplate.propTypes = {\n  data: PropTypes.object.isRequired, // eslint-disable-line react/forbid-prop-types\n  pageContext: PropTypes.shape({\n    pagePath: PropTypes.string.isRequired,\n    productName: PropTypes.string.isRequired,\n    reviews: PropTypes.arrayOf(PropTypes.shape),\n    stars: PropTypes.number,\n  }).isRequired,\n};\n\nexport const pageQuery = graphql`\n  query($parentPath: String!, $path: String!) {\n    parentPage: sitePage(context: {pagePath: {eq: $parentPath}}) {\n      id\n      context {\n        name\n        pagePath\n      }\n    }\n    sitePage(context: {pagePath: {eq: $path}, type: {eq: \"Product\"}}) {\n      id\n      context {\n        imageAlt\n        productDescription\n      }\n      image {\n        childImageSharp {\n          fluid {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}