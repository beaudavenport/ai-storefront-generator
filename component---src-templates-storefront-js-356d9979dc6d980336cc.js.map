{"version":3,"sources":["webpack:///./src/templates/storefront.js"],"names":["StorefrontTemplate","data","pageContext","sitePage","allSitePage","title","name","navHomePath","pagePath","render","isAnnotationsToggled","description","className","fixed","image","childImageSharp","alt","context","imageAlt","edges","map","edge","placement","isActive","node","productName","productDescription","split","to"],"mappings":"4FAAA,6IAQe,SAASA,EAAT,GAAoD,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,YACzCC,EAA0BF,EAA1BE,SAAUC,EAAgBH,EAAhBG,YAClB,OACE,kBAAC,IAAD,CACEC,MAAOH,EAAYI,KACnBC,YAAaL,EAAYM,SACzBC,OAAQ,gBAAGC,EAAH,EAAGA,qBAAH,OACN,oCACE,kBAAC,IAAD,CAAKL,MAAOH,EAAYI,KAAMK,YAAY,mCAC1C,yBAAKC,UAAU,WACb,yBAAKA,UAAU,SACb,4BAAQA,UAAU,mCAChB,uBAAGA,UAAU,kBACX,kBAAC,IAAD,CACEC,MAAOV,EAASW,MAAMC,gBAAgBF,MACtCG,IAAKb,EAASc,QAAQC,aAI5B,yBAAKN,UAAU,iBACb,yBAAKA,UAAU,WACb,uBAAGA,UAAU,SAAb,kCAGA,uBAAGA,UAAU,YAAb,+CAMN,8BAEF,yBAAKA,UAAU,WACb,yBAAKA,UAAU,wBACZR,EAAYe,MAAMC,KAAI,SAACC,GAAD,OACrB,yBAAKT,UAAU,oCACb,yBAAKA,UAAU,mCACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,0CACb,kBAAC,IAAD,CAAYU,UAAU,MAAMC,SAAUb,GACpC,4GAKJ,yBAAKE,UAAU,oBACb,kBAAC,IAAD,CACEC,MAAOQ,EAAKG,KAAKV,MAAMC,gBAAgBF,MACvCG,IAAKK,EAAKG,KAAKP,QAAQC,aAI7B,yBAAKN,UAAU,IACb,yBAAKA,UAAU,yCACb,6BACE,uBAAGA,UAAU,aACX,gCAASS,EAAKG,KAAKP,QAAQQ,aAC3B,kBAAC,IAAD,CAAYH,UAAU,SAASC,SAAUb,GACvC,4IAIF,6BACA,0CAEF,uBAAGE,UAAU,sBACVS,EAAKG,KAAKP,QAAQS,mBAAmBC,MAAM,MAAM,IAEpD,2BACE,kBAAC,IAAD,CAAMC,GAAIP,EAAKG,KAAKP,QAAQT,SAAUI,UAAU,qBAAhD,yBASbR,EAAYe,MAAMC,KAAI,SAACC,GAAD,OACrB,yBAAKT,UAAU,oCACb,yBAAKA,UAAU,mCACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,qCACb,kBAAC,IAAD,CAAYU,UAAU,MAAMC,SAAUb,GACpC,4GAKJ,yBAAKE,UAAU,oBACb,kBAAC,IAAD,CACEC,MAAOQ,EAAKG,KAAKV,MAAMC,gBAAgBF,MACvCG,IAAKK,EAAKG,KAAKP,QAAQC,aAI7B,yBAAKN,UAAU,iBACb,yBAAKA,UAAU,iDACb,6BACE,uBAAGA,UAAU,aACX,gCAASS,EAAKG,KAAKP,QAAQQ,aAC3B,kBAAC,IAAD,CAAYH,UAAU,SAASC,SAAUb,GACvC,4IAIF,6BACA,0CAEF,uBAAGE,UAAU,sBACVS,EAAKG,KAAKP,QAAQS,mBAAmBC,MAAM,MAAM,IAEpD,2BACE,kBAAC,IAAD,CAAMC,GAAIP,EAAKG,KAAKP,QAAQT,SAAUI,UAAU,qBAAhD","file":"component---src-templates-storefront-js-356d9979dc6d980336cc.js","sourcesContent":["import { graphql, Link } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Img from 'gatsby-image';\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport Annotation from '../components/annotation';\n\nexport default function StorefrontTemplate({ data, pageContext }) {\n  const { sitePage, allSitePage } = data;\n  return (\n    <Layout\n      title={pageContext.name}\n      navHomePath={pageContext.pagePath}\n      render={({ isAnnotationsToggled }) => (\n        <>\n          <SEO title={pageContext.name} description=\"Unique products, made-to-order\" />\n          <div className=\"section\">\n            <div className=\"media\">\n              <figure className=\"media-left is-align-self-center\">\n                <p className=\"image is-64x64\">\n                  <Img\n                    fixed={sitePage.image.childImageSharp.fixed}\n                    alt={sitePage.context.imageAlt}\n                  />\n                </p>\n              </figure>\n              <div className=\"media-content\">\n                <div className=\"content\">\n                  <p className=\"title\">\n                    Unique products, made-to-order\n                  </p>\n                  <p className=\"subtitle\">\n                    Browse our selection of offerings below!\n                  </p>\n                </div>\n              </div>\n            </div>\n            <hr />\n          </div>\n          <div className=\"section\">\n            <div className=\"columns is-multiline\">\n              {allSitePage.edges.map((edge) => (\n                <div className=\"column mb-4 is-one-third-desktop\">\n                  <div className=\"media is-justify-content-center\">\n                    <figure className=\"media-left\">\n                      <div className=\"is-flex is-justify-content-center ml-6\">\n                        <Annotation placement=\"top\" isActive={isAnnotationsToggled}>\n                          <strong>\n                            Product images are generated with Deep AI, providing the product name.\n                          </strong>\n                        </Annotation>\n                      </div>\n                      <div className=\"image is-128X128\">\n                        <Img\n                          fixed={edge.node.image.childImageSharp.fixed}\n                          alt={edge.node.context.imageAlt}\n                        />\n                      </div>\n                    </figure>\n                    <div className=\"\">\n                      <div className=\"is-flex is-justify-content-flex-start\">\n                        <div>\n                          <p className=\"is-size-5\">\n                            <strong>{edge.node.context.productName}</strong>\n                            <Annotation placement=\"bottom\" isActive={isAnnotationsToggled}>\n                              <strong>\n                                Product names are extracted from the text prompt by Google analysis on terms considered \"CONSUMER_GOOD\"\n                              </strong>\n                            </Annotation>\n                            <br />\n                            <small>$99.99</small>\n                          </p>\n                          <p className=\"is-size-7 subtitle\">\n                            {edge.node.context.productDescription.split('\\n')[0]}\n                          </p>\n                          <p>\n                            <Link to={edge.node.context.pagePath} className=\"button is-primary\">View Details</Link>\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n              {/* temp duplication for styling */}\n              {allSitePage.edges.map((edge) => (\n                <div className=\"column mb-4 is-one-third-desktop\">\n                  <div className=\"media is-justify-content-center\">\n                    <figure className=\"media-left\">\n                      <div className=\"is-flex is-justify-content-center\">\n                        <Annotation placement=\"top\" isActive={isAnnotationsToggled}>\n                          <strong>\n                            Product images are generated with Deep AI, providing the product name.\n                          </strong>\n                        </Annotation>\n                      </div>\n                      <div className=\"image is-128X128\">\n                        <Img\n                          fixed={edge.node.image.childImageSharp.fixed}\n                          alt={edge.node.context.imageAlt}\n                        />\n                      </div>\n                    </figure>\n                    <div className=\"media-content\">\n                      <div className=\"content is-flex is-justify-content-flex-start\">\n                        <div>\n                          <p className=\"is-size-5\">\n                            <strong>{edge.node.context.productName}</strong>\n                            <Annotation placement=\"bottom\" isActive={isAnnotationsToggled}>\n                              <strong>\n                                Product names are extracted from the text prompt by Google analysis on terms considered \"CONSUMER_GOOD\"\n                              </strong>\n                            </Annotation>\n                            <br />\n                            <small>$99.99</small>\n                          </p>\n                          <p className=\"is-size-7 subtitle\">\n                            {edge.node.context.productDescription.split('\\n')[0]}\n                          </p>\n                          <p>\n                            <Link to={edge.node.context.pagePath} className=\"button is-primary\">View Details</Link>\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </>\n      )}\n    />\n  );\n}\nStorefrontTemplate.propTypes = {\n  data: PropTypes.object.isRequired, // eslint-disable-line react/forbid-prop-types\n};\n\nexport const pageQuery = graphql`\n  query($path: String!) {\n    sitePage(context: {pagePath: {eq: $path}}) {\n      context {\n        imageAlt\n      }\n      image {\n        childImageSharp {\n          fixed(width: 64) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n    }\n    allSitePage(filter: {path: {}, context: {parentPath: {eq: $path}, type: {eq: \"Product\"}}}) {\n      edges {\n        node {\n          id\n          path\n          context {\n            name\n            pagePath\n            productName\n            imageAlt\n            productDescription\n          }\n          image {\n            childImageSharp {\n              fixed(width: 128) {\n                ...GatsbyImageSharpFixed\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}