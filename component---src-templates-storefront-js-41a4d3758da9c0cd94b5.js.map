{"version":3,"sources":["webpack:///./src/components/layout.js","webpack:///./src/components/annotation.js","webpack:///./src/templates/storefront.js"],"names":["Layout","title","navHomePath","render","useState","isMenuOpen","setIsMenuOpen","isAnnotationsToggled","setIsAnnotationsToggled","className","role","aria-label","to","ari-label","aria-expanded","onClick","aria-hidden","id","type","Annotation","placement","children","isActive","defaultProps","StorefrontTemplate","data","pageContext","sitePage","allSitePage","name","pagePath","description","fixed","image","childImageSharp","alt","context","imageAlt","edges","map","edge","key","node","productName","productPrice","Array","stars","fill","_","i","productDescription","split"],"mappings":"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","file":"component---src-templates-storefront-js-41a4d3758da9c0cd94b5.js","sourcesContent":["/* eslint-disable jsx-a11y/anchor-is-valid */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable jsx-a11y/interactive-supports-focus */\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'gatsby';\nimport Footer from './footer';\n\nconst Layout = ({ title, navHomePath, render }) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [isAnnotationsToggled, setIsAnnotationsToggled] = useState(false);\n  return (\n    <div>\n      <nav className=\"navbar is-light is-fixed-top\" role=\"navigation\" aria-label=\"main navigation\">\n        <div className=\"container\">\n          <div className=\"navbar-brand\">\n            <Link to={navHomePath} className=\"navbar-item\">\n              <strong>{title}</strong>\n            </Link>\n            <a\n              role=\"button\"\n              className=\"navbar-burger\"\n              ari-label=\"menu\"\n              aria-expanded=\"false\"\n              onClick={() => setIsMenuOpen(!isMenuOpen)}\n            >\n              <span aria-hidden=\"true\" />\n              <span aria-hidden=\"true\" />\n              <span aria-hidden=\"true\" />\n            </a>\n          </div>\n          <div id=\"navbarBasicExample\" className={`navbar-menu${isMenuOpen ? ' is-active' : ''}`}>\n            <div className=\"navbar-start\">\n              <Link to={navHomePath} className=\"navbar-item\">\n                Products\n              </Link>\n              <Link to={`${navHomePath}about-us`} className=\"navbar-item\">\n                About Us\n              </Link>\n            </div>\n            <div className=\"navbar-end\">\n              <div className=\"navbar-item\">\n                <div className=\"buttons\">\n                  {!isAnnotationsToggled ? (\n                    <button type=\"button\" className=\"button is-warning\" onClick={() => setIsAnnotationsToggled(true)}>\n                      Show Annotations\n                    </button>\n                  ) : (\n                    <button type=\"button\" className=\"button is-warning is-inverted\" onClick={() => setIsAnnotationsToggled(false)}>\n                      Hide Annotations\n                    </button>\n                  )}\n                </div>\n              </div>\n              <div className=\"navbar-item\">\n                <div className=\"buttons\">\n                  <Link to=\"/\" className=\"button is-link\">\n                    Back to Entries\n                  </Link>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </nav>\n      <div className=\"container pt-6\">\n        {render({ isAnnotationsToggled })}\n      </div>\n      <Footer />\n    </div>\n  );\n};\n\nLayout.propTypes = {\n  title: PropTypes.string.isRequired,\n  navHomePath: PropTypes.string.isRequired,\n  render: PropTypes.func.isRequired,\n};\n\nexport default Layout;\n","import React from 'react';\r\nimport { PropTypes } from 'prop-types';\r\n\r\nconst Annotation = ({\r\n  placement, children, isActive = false,\r\n}) => (\r\n  <div className={`popover is-popover-${placement} ${isActive ? 'is-popover-active' : ''}`}>\r\n    <div className=\"popover-content\">\r\n      {children}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nAnnotation.propTypes = {\r\n  placement: PropTypes.oneOf(['top', 'bottom', 'left', 'right']),\r\n  children: PropTypes.node.isRequired,\r\n  isActive: PropTypes.bool,\r\n};\r\n\r\nAnnotation.defaultProps = {\r\n  placement: 'top',\r\n  isActive: false,\r\n};\r\n\r\nexport default Annotation;\r\n","import { graphql, Link } from 'gatsby';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Img from 'gatsby-image';\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport Annotation from '../components/annotation';\n\nexport default function StorefrontTemplate({ data, pageContext }) {\n  const { sitePage, allSitePage } = data;\n  return (\n    <Layout\n      title={pageContext.name}\n      navHomePath={pageContext.pagePath}\n      render={({ isAnnotationsToggled }) => (\n        <>\n          <SEO title={pageContext.name} description=\"Unique products, made-to-order\" />\n          <div className=\"section\">\n            <div className=\"media\">\n              <figure className=\"media-left is-align-self-center\">\n                <div className=\"image is-64x64\">\n                  <Img\n                    fixed={sitePage.image.childImageSharp.fixed}\n                    alt={sitePage.context.imageAlt}\n                  />\n                </div>\n              </figure>\n              <div className=\"media-content\">\n                <div className=\"content\">\n                  <p className=\"title\">\n                    Unique products, made-to-order\n                  </p>\n                  <p className=\"subtitle\">\n                    Browse our selection of offerings below!\n                  </p>\n                </div>\n              </div>\n            </div>\n            <hr />\n          </div>\n          <div className=\"section\">\n            <div className=\"columns is-multiline\">\n              {allSitePage.edges.map((edge) => (\n                <div className=\"column mb-4 is-one-third-desktop\" key={edge.node.context.productName}>\n                  <div className=\"media is-justify-content-center\">\n                    <figure className=\"media-left\">\n                      <div className=\"is-flex is-justify-content-center ml-6\">\n                        <Annotation placement=\"top\" isActive={isAnnotationsToggled}>\n                          <strong>\n                            Product images are generated with Deep AI, providing the product name.\n                          </strong>\n                        </Annotation>\n                      </div>\n                      <div className=\"image is-128X128\">\n                        <Img\n                          fixed={edge.node.image.childImageSharp.fixed}\n                          alt={edge.node.context.imageAlt}\n                        />\n                      </div>\n                    </figure>\n                    <div className=\"\">\n                      <div className=\"is-flex is-justify-content-flex-start\">\n                        <div>\n                          <p className=\"is-size-5\">\n                            <strong>{edge.node.context.productName}</strong>\n                            <br />\n                            <small>{edge.node.context.productPrice}</small>\n                          </p>\n                          <p>\n                            {new Array(edge.node.context.stars).fill().map((_, i) => (\n                              // eslint-disable-next-line react/no-array-index-key\n                              <span className=\"icon is-small\" key={`${i}`}>\n                                <i className=\"fas fa-star\" />\n                              </span>\n                            ))}\n                          </p>\n                          <Annotation placement=\"bottom\" isActive={isAnnotationsToggled}>\n                            <strong>\n                              Product names are extracted from the text prompt by\n                              Google analysis on terms considered &quot;CONSUMER_GOOD&quot;\n                            </strong>\n                          </Annotation>\n                          <p className=\"is-size-7 subtitle\">\n                            {edge.node.context.productDescription.split('\\n')[0]}\n                          </p>\n                          <p>\n                            <Link to={edge.node.context.pagePath} className=\"button is-primary\">View Details</Link>\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </>\n      )}\n    />\n  );\n}\nStorefrontTemplate.propTypes = {\n  data: PropTypes.object.isRequired, // eslint-disable-line react/forbid-prop-types\n  pageContext: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    pagePath: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport const pageQuery = graphql`\n  query($path: String!) {\n    sitePage(context: {pagePath: {eq: $path}}) {\n      context {\n        imageAlt\n      }\n      image {\n        childImageSharp {\n          fixed(width: 64) {\n            ...GatsbyImageSharpFixed\n          }\n        }\n      }\n    }\n    allSitePage(filter: {path: {}, context: {parentPath: {eq: $path}, type: {eq: \"Product\"}}}) {\n      edges {\n        node {\n          id\n          path\n          context {\n            name\n            pagePath\n            productName\n            productPrice\n            stars\n            imageAlt\n            productDescription\n          }\n          image {\n            childImageSharp {\n              fixed(width: 128) {\n                ...GatsbyImageSharpFixed\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}